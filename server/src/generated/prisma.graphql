# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Option implements Node {
  id: ID!
  name: String!
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  poll(where: PollWhereInput): Poll!
}

type Poll implements Node {
  id: ID!
  name: String!
  options(where: OptionWhereInput, orderBy: OptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Option!]
}

type Vote implements Node {
  id: ID!
  option(where: OptionWhereInput): Option!
}


#
# Other Types
#

type AggregateOption {
  count: Int!
}

type AggregatePoll {
  count: Int!
}

type AggregateVote {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createPoll(data: PollCreateInput!): Poll!
  createOption(data: OptionCreateInput!): Option!
  createVote(data: VoteCreateInput!): Vote!
  updatePoll(data: PollUpdateInput!, where: PollWhereUniqueInput!): Poll
  updateOption(data: OptionUpdateInput!, where: OptionWhereUniqueInput!): Option
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  deletePoll(where: PollWhereUniqueInput!): Poll
  deleteOption(where: OptionWhereUniqueInput!): Option
  deleteVote(where: VoteWhereUniqueInput!): Vote
  upsertPoll(where: PollWhereUniqueInput!, create: PollCreateInput!, update: PollUpdateInput!): Poll!
  upsertOption(where: OptionWhereUniqueInput!, create: OptionCreateInput!, update: OptionUpdateInput!): Option!
  upsertVote(where: VoteWhereUniqueInput!, create: VoteCreateInput!, update: VoteUpdateInput!): Vote!
  updateManyPolls(data: PollUpdateInput!, where: PollWhereInput!): BatchPayload!
  updateManyOptions(data: OptionUpdateInput!, where: OptionWhereInput!): BatchPayload!
  updateManyVotes(data: VoteUpdateInput!, where: VoteWhereInput!): BatchPayload!
  deleteManyPolls(where: PollWhereInput!): BatchPayload!
  deleteManyOptions(where: OptionWhereInput!): BatchPayload!
  deleteManyVotes(where: VoteWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
A connection to a list of items.
"""
type OptionConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [OptionEdge]!
  aggregate: AggregateOption!
}

input OptionCreateInput {
  name: String!
  votes: VoteCreateManyWithoutOptionInput
  poll: PollCreateOneWithoutOptionsInput!
}

input OptionCreateManyWithoutPollInput {
  create: [OptionCreateWithoutPollInput!]
  connect: [OptionWhereUniqueInput!]
}

input OptionCreateOneWithoutVotesInput {
  create: OptionCreateWithoutVotesInput
  connect: OptionWhereUniqueInput
}

input OptionCreateWithoutPollInput {
  name: String!
  votes: VoteCreateManyWithoutOptionInput
}

input OptionCreateWithoutVotesInput {
  name: String!
  poll: PollCreateOneWithoutOptionsInput!
}

"""
An edge in a connection.
"""
type OptionEdge {
  """
  The item at the end of the edge.
  """
  node: Option!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum OptionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OptionPreviousValues {
  id: ID!
  name: String!
}

type OptionSubscriptionPayload {
  mutation: MutationType!
  node: Option
  updatedFields: [String!]
  previousValues: OptionPreviousValues
}

input OptionSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [OptionSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [OptionSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OptionWhereInput
}

input OptionUpdateInput {
  name: String
  votes: VoteUpdateManyWithoutOptionInput
  poll: PollUpdateOneWithoutOptionsInput
}

input OptionUpdateManyWithoutPollInput {
  create: [OptionCreateWithoutPollInput!]
  connect: [OptionWhereUniqueInput!]
  disconnect: [OptionWhereUniqueInput!]
  delete: [OptionWhereUniqueInput!]
  update: [OptionUpdateWithWhereUniqueWithoutPollInput!]
  upsert: [OptionUpsertWithWhereUniqueWithoutPollInput!]
}

input OptionUpdateOneWithoutVotesInput {
  create: OptionCreateWithoutVotesInput
  connect: OptionWhereUniqueInput
  delete: Boolean
  update: OptionUpdateWithoutVotesDataInput
  upsert: OptionUpsertWithoutVotesInput
}

input OptionUpdateWithoutPollDataInput {
  name: String
  votes: VoteUpdateManyWithoutOptionInput
}

input OptionUpdateWithoutVotesDataInput {
  name: String
  poll: PollUpdateOneWithoutOptionsInput
}

input OptionUpdateWithWhereUniqueWithoutPollInput {
  where: OptionWhereUniqueInput!
  data: OptionUpdateWithoutPollDataInput!
}

input OptionUpsertWithoutVotesInput {
  update: OptionUpdateWithoutVotesDataInput!
  create: OptionCreateWithoutVotesInput!
}

input OptionUpsertWithWhereUniqueWithoutPollInput {
  where: OptionWhereUniqueInput!
  update: OptionUpdateWithoutPollDataInput!
  create: OptionCreateWithoutPollInput!
}

input OptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [OptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [OptionWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  poll: PollWhereInput
}

input OptionWhereUniqueInput {
  id: ID
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
A connection to a list of items.
"""
type PollConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [PollEdge]!
  aggregate: AggregatePoll!
}

input PollCreateInput {
  name: String!
  options: OptionCreateManyWithoutPollInput
}

input PollCreateOneWithoutOptionsInput {
  create: PollCreateWithoutOptionsInput
  connect: PollWhereUniqueInput
}

input PollCreateWithoutOptionsInput {
  name: String!
}

"""
An edge in a connection.
"""
type PollEdge {
  """
  The item at the end of the edge.
  """
  node: Poll!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PollOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PollPreviousValues {
  id: ID!
  name: String!
}

type PollSubscriptionPayload {
  mutation: MutationType!
  node: Poll
  updatedFields: [String!]
  previousValues: PollPreviousValues
}

input PollSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PollSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PollSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PollWhereInput
}

input PollUpdateInput {
  name: String
  options: OptionUpdateManyWithoutPollInput
}

input PollUpdateOneWithoutOptionsInput {
  create: PollCreateWithoutOptionsInput
  connect: PollWhereUniqueInput
  delete: Boolean
  update: PollUpdateWithoutOptionsDataInput
  upsert: PollUpsertWithoutOptionsInput
}

input PollUpdateWithoutOptionsDataInput {
  name: String
}

input PollUpsertWithoutOptionsInput {
  update: PollUpdateWithoutOptionsDataInput!
  create: PollCreateWithoutOptionsInput!
}

input PollWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PollWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PollWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  options_every: OptionWhereInput
  options_some: OptionWhereInput
  options_none: OptionWhereInput
}

input PollWhereUniqueInput {
  id: ID
}

type Query {
  polls(where: PollWhereInput, orderBy: PollOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Poll]!
  options(where: OptionWhereInput, orderBy: OptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Option]!
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote]!
  poll(where: PollWhereUniqueInput!): Poll
  option(where: OptionWhereUniqueInput!): Option
  vote(where: VoteWhereUniqueInput!): Vote
  pollsConnection(where: PollWhereInput, orderBy: PollOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PollConnection!
  optionsConnection(where: OptionWhereInput, orderBy: OptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OptionConnection!
  votesConnection(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  poll(where: PollSubscriptionWhereInput): PollSubscriptionPayload
  option(where: OptionSubscriptionWhereInput): OptionSubscriptionPayload
  vote(where: VoteSubscriptionWhereInput): VoteSubscriptionPayload
}

"""
A connection to a list of items.
"""
type VoteConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [VoteEdge]!
  aggregate: AggregateVote!
}

input VoteCreateInput {
  option: OptionCreateOneWithoutVotesInput!
}

input VoteCreateManyWithoutOptionInput {
  connect: [VoteWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type VoteEdge {
  """
  The item at the end of the edge.
  """
  node: Vote!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum VoteOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type VotePreviousValues {
  id: ID!
}

type VoteSubscriptionPayload {
  mutation: MutationType!
  node: Vote
  updatedFields: [String!]
  previousValues: VotePreviousValues
}

input VoteSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [VoteSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [VoteSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VoteWhereInput
}

input VoteUpdateInput {
  option: OptionUpdateOneWithoutVotesInput
}

input VoteUpdateManyWithoutOptionInput {
  connect: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
}

input VoteWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [VoteWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [VoteWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  option: OptionWhereInput
}

input VoteWhereUniqueInput {
  id: ID
}
